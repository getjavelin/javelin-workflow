name: Composite Action - K8s Deploy
description: Deploying Helm Charts into Kubernetes

inputs:
  K8S_CLUSTER_TYPE:
    required: true
    type: string
  K8S_CLUSTER_NAME:
    required: true
    type: string
  K8S_NAMESPACE:
    required: true
    type: string
  SVC_NAME:
    required: true
    type: string
  HELM_CHART:
    required: true
    type: string
  RELEASE_MODE:
    required: true
    type: string
  HELM_TIMEOUT:
    required: false
    type: string
    default: "10m"
  GCP_WIP_PROVIDER:
    required: false
    type: string
  CICD_SA:
    required: false
    type: string
  AWS_ACCOUNT_ID:
    required: false
    type: string
  CICD_ROLE:
    required: false
    type: string
  CHART_NAME:
    required: false
    type: string
  CLIENT_ID:
    required: false
    type: string
  TENANT_ID:
    required: false
    type: string
  SUBSCRIPTION_ID:
    required: false
    type: string
  RESOURCE_GROUP:
    required: false
    type: string
  REGION:
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Helm Installation
      uses: azure/setup-helm@v4

    - name: Configure GCP credentials
      if: ${{ inputs.K8S_CLUSTER_TYPE == 'gke' }}
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ inputs.GCP_WIP_PROVIDER }}
        service_account: ${{ inputs.CICD_SA }}
        token_format: access_token
        create_credentials_file: true

    - name: Login to GKE
      if: ${{ inputs.K8S_CLUSTER_TYPE == 'gke' }}
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ inputs.K8S_CLUSTER_NAME }}
        location: ${{ inputs.REGION }}

    - name: Configure AWS credentials
      if: ${{ inputs.K8S_CLUSTER_TYPE == 'eks' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: "arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/${{ inputs.CICD_ROLE }}"
        role-session-name: ${{ inputs.CICD_ROLE }}
        audience: sts.amazonaws.com
        aws-region: ${{ inputs.REGION }}

    - name: Login to EKS
      if: ${{ inputs.K8S_CLUSTER_TYPE == 'eks' }}
      shell: bash
      run: |-
        aws eks --region ${{ inputs.REGION }} update-kubeconfig --name ${{ inputs.K8S_CLUSTER_NAME }}

    - name: Configure Azure credentials
      if: ${{ inputs.K8S_CLUSTER_TYPE == 'aks' }}
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.CLIENT_ID }}
        tenant-id: ${{ inputs.TENANT_ID }}
        subscription-id: ${{ inputs.SUBSCRIPTION_ID }}

    - name: Install kubelogin
      if: ${{ inputs.K8S_CLUSTER_TYPE == 'aks' }}
      uses: azure/use-kubelogin@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to AKS
      if: ${{ inputs.K8S_CLUSTER_TYPE == 'aks' }}
      uses: azure/aks-set-context@v4
      with:
        resource-group: ${{ inputs.RESOURCE_GROUP }}
        cluster-name: ${{ inputs.K8S_CLUSTER_NAME }}
        admin: 'false'
        use-kubelogin: 'true'

    - name: Deploying Helm Chart
      shell: bash
      run: |-
        kubectl get ns ${{ inputs.K8S_NAMESPACE }} || kubectl create ns ${{ inputs.K8S_NAMESPACE }}
        sleep 5

        case "${{ inputs.SVC_NAME }}" in
          "javelin-admin")
              kubectl -n ${{ inputs.K8S_NAMESPACE }} delete secret ${{ inputs.SVC_NAME }}-license || echo "K8s secret ${{ inputs.SVC_NAME }}-license not found"
              sleep 10
              kubectl -n ${{ inputs.K8S_NAMESPACE }} create secret generic ${{ inputs.SVC_NAME }}-license --from-file=license.jwt --from-file=public.pem
              rm -rf license.jwt public.pem
            ;;
          "javelin-core")
              kubectl -n ${{ inputs.K8S_NAMESPACE }} delete secret ${{ inputs.SVC_NAME }}-file || echo "K8s secret ${{ inputs.SVC_NAME }}-file not found"
              sleep 10
              kubectl -n ${{ inputs.K8S_NAMESPACE }} create secret generic ${{ inputs.SVC_NAME }}-file --from-file=javelin-gcpjson.json
              rm -rf javelin-gcpjson.json
            ;;
          "javelin-flag")
              kubectl -n ${{ inputs.K8S_NAMESPACE }} delete secret ${{ inputs.SVC_NAME }}-file || echo "K8s secret ${{ inputs.SVC_NAME }}-file not found"
              sleep 10
              kubectl -n ${{ inputs.K8S_NAMESPACE }} create secret generic ${{ inputs.SVC_NAME }}-file --from-file=javelin.goff.yaml
            ;;
          *)
              echo "No custom configuration for the service ${{ inputs.SVC_NAME }}"
            ;;
        esac

        if [[ -f set-env.sh ]] ; then
          if kubectl -n ${{ inputs.K8S_NAMESPACE }} get secrets ${{ inputs.SVC_NAME }}-env ; then
            kubectl -n ${{ inputs.K8S_NAMESPACE }} delete secrets ${{ inputs.SVC_NAME }}-env
            sleep 5
          fi

          kubectl -n ${{ inputs.K8S_NAMESPACE }} create secret generic ${{ inputs.SVC_NAME }}-env --from-file=set-env.sh
        fi

        helm repo add ${{ inputs.SVC_NAME }} "${{ inputs.HELM_CHART }}"
        helm repo update
        helm search repo ${{ inputs.SVC_NAME }}
        # helm search repo ${{ inputs.SVC_NAME }} --versions --devel

        if helm status ${{ inputs.SVC_NAME }} --namespace ${{ inputs.K8S_NAMESPACE }} >/dev/null 2>&1 ; then
          if [[ ${{ inputs.RELEASE_MODE }} == "reinstall" ]] ; then
            helm uninstall ${{ inputs.SVC_NAME }} --namespace ${{ inputs.K8S_NAMESPACE }}
            sleep 5
            HELM_CMD="install"
          else
            HELM_CMD="upgrade"
          fi
        else
          HELM_CMD="install"
        fi

        if [[ "${{ env.CHART_NAME }}" == "" ]] ; then
          SVC_CHART_NAME=${{ inputs.SVC_NAME }}
        else
          SVC_CHART_NAME=${{ inputs.CHART_NAME }}
        fi

        helm "${HELM_CMD}" ${{ inputs.SVC_NAME }} ${{ inputs.SVC_NAME }}/${SVC_CHART_NAME} \
          --namespace ${{ inputs.K8S_NAMESPACE }} \
          -f helm-values.yml

        if kubectl -n ${{ inputs.K8S_NAMESPACE }} get deploy ${{ inputs.SVC_NAME }} >/dev/null 2>&1 ; then
          for i in {1..3} ; do
            echo "${i} : Checking the status for the K8s Deployment"
            kubectl --namespace ${{ inputs.K8S_NAMESPACE }} rollout status deploy ${{ inputs.SVC_NAME }} -w --timeout=${{ inputs.HELM_TIMEOUT }} || export ROLLOUT_STATUS="failed"
            if [[ ${ROLLOUT_STATUS} == "failed" ]] ; then
              sleep 30
            else
              break
            fi
          done
        fi

        if [[ ${ROLLOUT_STATUS} == "failed" ]] ; then
          echo "Deployment failed for the service ${{ inputs.SVC_NAME }}...!"
          exit 1
        fi

        helm repo remove ${{ inputs.SVC_NAME }}
        rm -rf ~/.kube helm-values.yml