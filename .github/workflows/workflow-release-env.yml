name: Reusable Workflow - Release Env

on:
  workflow_call:
    inputs:
      PIPELINE_ROLE:
        required: true
        type: string
      DEVOPS_REPO:
        required: false
        type: string
        default: "javelin-cloud"
      DEVOPS_BRANCH:
        required: false
        type: string
        default: "main"
      INPUT_SVC_NAME:
        required: false
        type: string
        default: ""
    secrets:
      DEVOPS_GITHUB_TOKEN:
        required: true
    outputs:
      build_env:
        value: ${{ jobs.javelin-env.outputs.build_env }}
      image_tag:
        value: ${{ jobs.javelin-env.outputs.image_tag }}
      short_sha:
        value: ${{ jobs.javelin-env.outputs.short_sha }}
      lc_repository:
        value: ${{ jobs.javelin-env.outputs.lc_repository }}
      build_platform:
        value: ${{ jobs.javelin-env.outputs.build_platform }}
      release_mode:
        value: ${{ jobs.javelin-env.outputs.release_mode }}
      environment_aws:
        value: ${{ jobs.javelin-env.outputs.environment_aws }}
      environment_aws_string:
        value: ${{ jobs.javelin-env.outputs.environment_aws_string }}
      environment_gcp:
        value: ${{ jobs.javelin-env.outputs.environment_gcp }}
      environment_gcp_string:
        value: ${{ jobs.javelin-env.outputs.environment_gcp_string }}
      environment_azure:
        value: ${{ jobs.javelin-env.outputs.environment_azure }}
      environment_azure_string:
        value: ${{ jobs.javelin-env.outputs.environment_azure_string }}
      dependant_repos:
        value: ${{ jobs.javelin-env.outputs.dependant_repos }}
      dependant_branch:
        value: ${{ jobs.javelin-env.outputs.dependant_branch }}
      chglog_pr_reviewers:
        value: ${{ jobs.javelin-env.outputs.chglog_pr_reviewers }}
      sharedlibs_pr_reviewers:
        value: ${{ jobs.javelin-env.outputs.sharedlibs_pr_reviewers }}
      slack_release_channel_id:
        value: ${{ jobs.javelin-env.outputs.slack_release_channel_id }}

env:
  PIPELINE_ROLE: ${{ inputs.PIPELINE_ROLE }}
  DEVOPS_REPO: ${{ inputs.DEVOPS_REPO }}
  DEVOPS_BRANCH: ${{ inputs.DEVOPS_BRANCH }}
  INPUT_SVC_NAME: ${{ inputs.INPUT_SVC_NAME }}

jobs:
  javelin-env:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setting up Repo Env
        id: repo_env_setup
        shell: bash
        run: |-
          echo "repository=$(basename ${{ github.repository }})" >> ${GITHUB_OUTPUT}
          echo "shortsha=$(git rev-parse --short=7 HEAD)" >> ${GITHUB_OUTPUT}
          echo "build_env=release" >> ${GITHUB_OUTPUT}
          echo "image_tag=$(basename ${{ github.event.release.tag_name }})" >> ${GITHUB_OUTPUT}

      - name: Set Lowercase Repo Name
        id: lc_repository
        env:
          REPO_NAME: ${{ steps.repo_env_setup.outputs.repository }}
        shell: bash
        run: echo "name=${REPO_NAME,,}" >> ${GITHUB_OUTPUT}

      - name: DevOps Repository Checkout
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ env.DEVOPS_REPO }}"
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ env.DEVOPS_BRANCH }}
          path: ${{ env.DEVOPS_REPO }}

      - name: Get Build Config
        id: build_config
        env:
          SELF_SVC_NAME: ${{ steps.lc_repository.outputs.name }}
        shell: bash
        run: |-
          if [[ "${{ env.INPUT_SVC_NAME }}" == "" ]] ; then
            export SVC_NAME=${{ env.SELF_SVC_NAME }}
          else
            export SVC_NAME=${{ env.INPUT_SVC_NAME }}
          fi

          if [[ -f ${{ env.DEVOPS_REPO }}/app-config/${SVC_NAME}/pipeline-config.json ]] ; then
            export json_file="${{ env.DEVOPS_REPO }}/app-config/${SVC_NAME}/pipeline-config.json"
          else
            export json_file="${{ env.DEVOPS_REPO }}/app-config/javelin-default/pipeline-config.json"
          fi

          build_platform=$(cat ${json_file} | jq -c '.build.platform.${{ env.PIPELINE_ROLE }} | split(", ")')
          release_mode=$(cat ${json_file} | jq -r '.deploy.release.mode')
          environment_aws=$(cat ${json_file} | jq -c '.deploy.type.${{ env.PIPELINE_ROLE }}.aws | split(", ")')
          environment_aws_string=$(cat ${json_file} | jq -r '.deploy.type.${{ env.PIPELINE_ROLE }}.aws')
          environment_gcp=$(cat ${json_file} | jq -c '.deploy.type.${{ env.PIPELINE_ROLE }}.gcp | split(", ")')
          environment_gcp_string=$(cat ${json_file} | jq -r '.deploy.type.${{ env.PIPELINE_ROLE }}.gcp')
          environment_azure=$(cat ${json_file} | jq -c '.deploy.type.${{ env.PIPELINE_ROLE }}.az | split(", ")')
          environment_azure_string=$(cat ${json_file} | jq -r '.deploy.type.${{ env.PIPELINE_ROLE }}.az')

          # Custom service
          if [[ ${SVC_NAME} == "shared-libs" ]] ; then
            dependant_repos=$(cat ${{ env.DEVOPS_REPO }}/app-config/${SVC_NAME}/pipeline-config.json | jq -c '.dependant.gh.repos | split(", ")')
            dependant_branch=$(cat ${{ env.DEVOPS_REPO }}/app-config/${SVC_NAME}/pipeline-config.json | jq -r '.dependant.gh.branch')
          fi

          chglog_pr_reviewers=$(cat ${{ env.DEVOPS_REPO }}/app-config/javelin-default/gh-config.json | jq -r '.github_accounts.changelog.ids')
          sharedlibs_pr_reviewers=$(cat ${{ env.DEVOPS_REPO }}/app-config/javelin-default/gh-config.json | jq -r '.github_accounts.sharedlibs.ids')
          slack_release_channel_id=$(cat ${{ env.DEVOPS_REPO }}/app-config/javelin-default/common-config.json | jq -r '.slack.release.channel_id')
          
          echo "build_platform=${build_platform}" >> ${GITHUB_OUTPUT}
          echo "chglog_pr_reviewers=${chglog_pr_reviewers}" >> ${GITHUB_OUTPUT}
          echo "sharedlibs_pr_reviewers=${sharedlibs_pr_reviewers}" >> ${GITHUB_OUTPUT}
          echo "release_mode=${release_mode}" >> ${GITHUB_OUTPUT}
          echo "dependant_repos=${dependant_repos}" >> ${GITHUB_OUTPUT}
          echo "dependant_branch=${dependant_branch}" >> ${GITHUB_OUTPUT}
          echo "environment_aws=${environment_aws}" >> ${GITHUB_OUTPUT}
          echo "environment_aws_string=${environment_aws_string}" >> ${GITHUB_OUTPUT}
          echo "environment_gcp=${environment_gcp}" >> ${GITHUB_OUTPUT}
          echo "environment_gcp_string=${environment_gcp_string}" >> ${GITHUB_OUTPUT}
          echo "environment_azure=${environment_azure}" >> ${GITHUB_OUTPUT}
          echo "environment_azure_string=${environment_azure_string}" >> ${GITHUB_OUTPUT}
          echo "slack_release_channel_id=${slack_release_channel_id}" >> ${GITHUB_OUTPUT}
    outputs:
      build_env: ${{ steps.repo_env_setup.outputs.build_env }}
      image_tag: ${{ steps.repo_env_setup.outputs.image_tag }}
      short_sha: ${{ steps.repo_env_setup.outputs.shortsha }}
      lc_repository: ${{ steps.lc_repository.outputs.name }}
      build_platform: ${{ steps.build_config.outputs.build_platform }}
      release_mode: ${{ steps.build_config.outputs.release_mode }}
      environment_aws: ${{ steps.build_config.outputs.environment_aws }}
      environment_aws_string: ${{ steps.build_config.outputs.environment_aws_string }}
      environment_gcp: ${{ steps.build_config.outputs.environment_gcp }}
      environment_gcp_string: ${{ steps.build_config.outputs.environment_gcp_string }}
      environment_azure: ${{ steps.build_config.outputs.environment_azure }}
      environment_azure_string: ${{ steps.build_config.outputs.environment_azure_string }}
      dependant_repos: ${{ steps.build_config.outputs.dependant_repos }}
      dependant_branch: ${{ steps.build_config.outputs.dependant_branch }}
      sharedlibs_pr_reviewers: ${{ steps.build_config.outputs.sharedlibs_pr_reviewers }}
      chglog_pr_reviewers: ${{ steps.build_config.outputs.chglog_pr_reviewers }}
      slack_release_channel_id: ${{ steps.build_config.outputs.slack_release_channel_id }}