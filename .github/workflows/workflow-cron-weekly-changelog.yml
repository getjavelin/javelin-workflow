name: Reusable Workflow - Cron Weekly Changelog

on:
  workflow_call:
    inputs:
      DEVOPS_REPO:
        required: false
        type: string
        default: "javelin-cloud"
      DEVOPS_BRANCH:
        required: false
        type: string
        default: "main"
      CHANGELOG_BR:
        required: false
        type: string
        default: "main"
    secrets:
      DEVOPS_GITHUB_TOKEN:
        required: true
      DEVOPS_PR_TOKEN:
        required: true
      SLACK_BOT_TOKEN:
        required: false

env:
  env_var: ${{ vars.ENV_CONTEXT_VAR }}
  DEVOPS_REPO: ${{ inputs.DEVOPS_REPO }}
  DEVOPS_BRANCH: ${{ inputs.DEVOPS_BRANCH }}
  CHANGELOG_BR: ${{ inputs.CHANGELOG_BR }}
  PY_VER: 3.11.8
  PIPELINE_DEBUG: "disable"
  SLACK_PAYLOAD_JSON: "slack-customer-changelog-payload.json"
  CUSTOMER_CHANGELOG_FILE: "CUSTOMER-WEEKLY-CHANGELOG.md"
  CHANGELOG_REPOS: >
    javelin-admin
    javelin-core
    javelin-dlp
    javelin-eval
    javelin-iac
    javelin-models
    javelin-python
    javelin-redteam
    javelin-webapp

jobs:
  javelin-env:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setting up Repo Env
        id: repo_env_setup
        shell: bash
        run: |-
          echo "repository=$(basename ${{ github.repository }})" >> ${GITHUB_OUTPUT}
          echo "shortsha=$(git rev-parse --short=7 HEAD)" >> ${GITHUB_OUTPUT}

      - name: Set Lowercase Repo Name
        id: lc_repository
        env:
          REPO_NAME: ${{ steps.repo_env_setup.outputs.repository }}
        shell: bash
        run: echo "name=${REPO_NAME,,}" >> ${GITHUB_OUTPUT}

      - name: DevOps Repository Checkout
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ env.DEVOPS_REPO }}"
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ env.DEVOPS_BRANCH }}
          path: ${{ env.DEVOPS_REPO }}

      - name: Get Build Config
        id: build_config
        shell: bash
        run: |-
          chglog_pr_reviewers=$(cat ${{ env.DEVOPS_REPO }}/app-config/javelin-default/gh-config.json | jq -r '.github_accounts.changelog.ids')
          echo "chglog_pr_reviewers=${chglog_pr_reviewers}" >> ${GITHUB_OUTPUT}
    outputs:
      lc_repository: ${{ steps.lc_repository.outputs.name }}
      chglog_pr_reviewers: ${{ steps.build_config.outputs.chglog_pr_reviewers }}

  reusable-auto-release-workflow:
    permissions:
      contents: 'write'
      id-token: 'write'
    uses: getjavelin/javelin-workflow/.github/workflows/workflow-auto-release.yml@main
    with:
      TAG_SUFFIX: "-weekly"
      PUBLISH_RELEASE: "disable"
    secrets:
      DEVOPS_GITHUB_TOKEN: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

  javelin-weekly-changelog:
    needs:
      - javelin-env
      - reusable-auto-release-workflow
    permissions:
      contents: 'write'
      id-token: 'write'
      pull-requests: 'write'
    runs-on: ubuntu-24.04
    env:
      SVC_NAME: ${{ needs.javelin-env.outputs.lc_repository }}
      LATEST_TAG: ${{ needs.reusable-auto-release-workflow.outputs.latest_tag }}
      NEW_TAG: ${{ needs.reusable-auto-release-workflow.outputs.new_tag }}
      CICD_ROLE: "javelin-dev1-cicd-github-action"
      CICD_SECRET_MANUAL_NAME: "javelin-dev1-cicd-manual"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          persist-credentials: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ env.CICD_ROLE }}"
          role-session-name: ${{ env.CICD_ROLE }}
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get CICD Manual Secret from AWS Secret Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ${{ env.CICD_SECRET_MANUAL_NAME }}
          parse-json-secrets: true

      - name: Setting up CICD Manual Secret
        id: set_cicd_manual_secret
        shell: bash
        run: |-
          echo "openai_api_key=$(echo ${{ env.CICD_SECRET_MANUAL_NAME }}_openai_api_key | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}

      - name: DevOps Repository Checkout
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ env.DEVOPS_REPO }}"
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ env.DEVOPS_BRANCH }}
          path: ${{ env.DEVOPS_REPO }}

      - name: Setting up chglog-weekly config
        shell: bash
        run: |-
          if test -d "${{ env.DEVOPS_REPO }}/reference/templates/chglog-weekly" ; then
            cp -r ${{ env.DEVOPS_REPO }}/reference/templates/chglog-weekly .chglog
            sed -i "s|SVC_NAME_VALUE|${{ env.SVC_NAME }}|g" .chglog/config.yml
            rm -rf ${{ env.DEVOPS_REPO }}
          fi

      - name: Install git-chglog and generate WEEKLY-CHANGELOG
        shell: bash
        run: |-
          curl -sLfO https://github.com/git-chglog/git-chglog/releases/download/v0.15.4/git-chglog_0.15.4_linux_amd64.tar.gz
          tar -zxvf git-chglog_0.15.4_linux_amd64.tar.gz
          chmod +x git-chglog
          ./git-chglog --config .chglog/config.yml --output TEMP-CHANGELOG.md ${{ env.NEW_TAG }}
          echo "-----------------------------------"
          cat TEMP-CHANGELOG.md
          echo "-----------------------------------"

      - name: Set up Python Version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: 'pip'
          cache-dependency-path: '.chglog/requirements.txt'

      - name: Install Dependencies
        shell: bash
        run: |-
          cd .chglog
          pip install -r requirements.txt

      - name: Friendly Changelog
        env:
          OPENAI_API_KEY: $${{ steps.set_cicd_manual_secret.outputs.openai_api_key }}
        shell: bash
        run: |-
          export OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}
          cp .chglog/weekly-changelog.py .
          mkdir changelogs || echo "Dir changelogs already exist"
          python weekly-changelog.py -i TEMP-CHANGELOG.md -o changelogs/LATEST-WEEKLY-CHANGELOG.md
          echo "-----------------------------------"
          cat changelogs/LATEST-WEEKLY-CHANGELOG.md
          echo "-----------------------------------"
          cp changelogs/LATEST-WEEKLY-CHANGELOG.md WEEKLY-CHANGELOG.md.temp
          if [[ -f changelogs/WEEKLY-CHANGELOG.md ]] ; then
            cat changelogs/WEEKLY-CHANGELOG.md >> WEEKLY-CHANGELOG.md.temp
            rm -rf changelogs/WEEKLY-CHANGELOG.md
          fi
          mv WEEKLY-CHANGELOG.md.temp changelogs/WEEKLY-CHANGELOG.md

      - name: Customer Weekly Changelog
        if: ${{ env.SVC_NAME == 'javelin-cloud' }}
        shell: bash
        run: |-
          echo "# Customer Changlogs - $(date +%F)" > changelogs/${{ env.CUSTOMER_CHANGELOG_FILE }}
          echo -e "\n---\n" >> changelogs/${{ env.CUSTOMER_CHANGELOG_FILE }}

          for repo in ${{ env.CHANGELOG_REPOS }}; do
            echo -e "\n# ${repo}\n---\n" >> changelogs/${{ env.CUSTOMER_CHANGELOG_FILE }}

            if curl -s -H "Authorization: Bearer ${{ secrets.DEVOPS_GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3.raw" \
                "https://api.github.com/repos/${{ github.repository_owner }}/${repo}/contents/changelogs/LATEST-WEEKLY-CHANGELOG.md" >> changelogs/${{ env.CUSTOMER_CHANGELOG_FILE }} ; then
              echo -e "\n\n" >> changelogs/${{ env.CUSTOMER_CHANGELOG_FILE }}
            else
              echo "LATEST-WEEKLY-CHANGELOG.md not found for ${repo}"
            fi
          done

      - name: Upload Customer Weekly Changelog
        if: ${{ env.SVC_NAME == 'javelin-cloud' }}
        uses: actions/upload-artifact@v4
        with:
          name: customer-friendly-changelog
          path: changelogs/${{ env.CUSTOMER_CHANGELOG_FILE }}
          retention-days: 7
        continue-on-error: true

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          commit-message: 'devops: Update WEEKLY-CHANGELOG for ${{ env.NEW_TAG }}'
          title: 'WEEKLY-CHANGELOG for ${{ env.NEW_TAG }}'
          committer: GitHub Action <action@github.com>
          author: GitHub Action <action@github.com>
          body: >
            This PR is auto-generated by
            [release pipeline](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          base: ${{ env.CHANGELOG_BR }}
          branch: cicd-weekly-changelog
          delete-branch: true
          add-paths: changelogs/*.md
          reviewers: ${{ needs.javelin-env.outputs.chglog_pr_reviewers }}
          labels: auto-generated

      - name: Wait for PR Approval
        shell: bash
        run: |-
          sleep 10

      - name: Approve Pull Request
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.DEVOPS_PR_TOKEN }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          review-message: "Auto approved for automated PR"

      - name: Merge Pull Request
        uses: pascalgn/automerge-action@v0.16.4
        env:
          PULL_REQUEST: "${{ steps.create_pr.outputs.pull-request-number }}"
          GITHUB_TOKEN: "${{ secrets.DEVOPS_GITHUB_TOKEN }}"
          MERGE_COMMIT_MESSAGE: "This PR is auto-merged by [release pipeline](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          MERGE_REQUIRED_APPROVALS: "0"
          MERGE_RETRIES: "10"
          MERGE_RETRY_SLEEP: "20000"
          MERGE_METHOD: "rebase"
          MERGE_LABELS: "auto-generated"
          MERGE_REMOVE_LABELS: "auto-generated"
          UPDATE_LABELS: "auto-generated"
          UPDATE_METHOD: "merge"
          UPDATE_RETRIES: "6"
          UPDATE_RETRY_SLEEP: "20000"
    outputs:
      pr_url: ${{ steps.create_pr.outputs.pull-request-url }}
      pr_num: ${{ steps.create_pr.outputs.pull-request-number }}

  javelin-notify:
    needs:
      - javelin-env
      - javelin-weekly-changelog
    permissions:
      contents: 'read'
      id-token: 'write'
    if: (needs.javelin-env.outputs.lc_repository == 'javelin-cloud') 
    runs-on: ubuntu-24.04
    steps:
      - name: DevOps Repository Checkout
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ env.DEVOPS_REPO }}"
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ env.DEVOPS_BRANCH }}
          path: ${{ env.DEVOPS_REPO }}

      - name: Download Customer Weekly Changelog
        uses: actions/download-artifact@v4
        with:
          name: customer-friendly-changelog

      - name: Slack Payload Template
        shell: bash
        env:
          JOB_STATUS:
          JOB_STATUS_FAIL_MARK: ":x:"
          JOB_STATUS_SUCCESS_MARK: ":white_check_mark:"
          SVC_NAME: ${{ needs.javelin-env.outputs.lc_repository }}
          BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |-
          if [[ ${{ needs.javelin-weekly-changelog.result }} == "success" ]] ; then
            export JOB_STATUS_MARK=${JOB_STATUS_SUCCESS_MARK}
          else
            export JOB_STATUS_MARK=${JOB_STATUS_FAIL_MARK}
          fi
          export SLACK_CHANNEL_ID=$(cat ${{ env.DEVOPS_REPO }}/app-config/javelin-default/common-config.json | jq -r '.slack.weekly_update.channel_id')
          envsubst < ${{ env.DEVOPS_REPO }}/slack-notify/${{ env.SLACK_PAYLOAD_JSON }} > ${{ env.SLACK_PAYLOAD_JSON }}
          if [[ "${{ env.PIPELINE_DEBUG }}" == "enable" ]] ; then
            cat ${{ env.SLACK_PAYLOAD_JSON }}
          fi

      - name: Slack Notification
        id: slack_notify 
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload-file-path: "${{ inputs.SLACK_PAYLOAD_JSON }}"

      - name: Attach Customer Weekly Changelog to Slack Notification
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: files.uploadV2
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel_id: "${{ env.SLACK_CHANNEL_ID }}"
            thread_ts: ${{ steps.slack_notify.outputs.ts }}
            initial_comment: "The Customer Friendly Changelog"
            file: "changelogs/${{ env.CUSTOMER_CHANGELOG_FILE }}"
            filename: "${{ env.CUSTOMER_CHANGELOG_FILE }}"