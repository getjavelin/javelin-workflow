name: Reusable Workflow - CICD Auto Release

on:
  workflow_call:
    inputs:
      TAG_PREFIX:
        required: false
        type: string
        default: ""
      TAG_SUFFIX:
        required: false
        type: string
        default: ""
      TAG_PATTERN:
        required: false
        type: string
        default: "v[0-9]+\\.[0-9]+\\.[0-9]+"
      PUBLISH_RELEASE:
        required: false
        type: string
        default: "enable"
    secrets:
      DEVOPS_GITHUB_TOKEN:
        required: true
    outputs:
      latest_tag:
        value: ${{ jobs.javelin-auto-release.outputs.latest_tag }}
      new_tag:
        value: ${{ jobs.javelin-auto-release.outputs.new_tag }}

env:
  env_var: ${{ vars.ENV_CONTEXT_VAR }}
  TAG_PREFIX: ${{ inputs.TAG_PREFIX }}
  TAG_SUFFIX: ${{ inputs.TAG_SUFFIX }}
  TAG_PATTERN: ${{ inputs.TAG_PATTERN }}
  PUBLISH_RELEASE: ${{ inputs.PUBLISH_RELEASE }}

jobs:
  javelin-auto-release:
    permissions:
      contents: 'write'
      id-token: 'write'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Git User
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch Tags
        run: git fetch --tags

      - name: Get Latest Tag
        id: get_tag
        shell: bash
        run: |-
          export RELEASE_TAG="${{ env.TAG_PREFIX}}${{ env.TAG_PATTERN }}${{ env.TAG_SUFFIX }}"
          if git tag --sort=-v:refname | grep -E "^${RELEASE_TAG}$" ; then
            latest_tag=$(git tag --sort=-v:refname | grep -E "^${RELEASE_TAG}$" | head -n 1)
          else
            latest_tag="${{ env.TAG_PREFIX}}v0.0.0${{ env.TAG_SUFFIX }}"
          fi
          echo "latest_tag=${latest_tag}" >> ${GITHUB_OUTPUT}

      - name: Bump Patch Version
        id: bump_version
        shell: bash
        run: |-
          export latest_tag=${{ steps.get_tag.outputs.latest_tag }}
          IFS='.' read -r major minor patch <<<"${latest_tag#v}"
          new_tag="v$major.$minor.$((patch + 1))"
          echo "new_tag=${new_tag}${{ env.TAG_SUFFIX }}" >> ${GITHUB_OUTPUT}

      - name: Create Git Tag
        shell: bash
        run: |-
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push origin ${{ steps.bump_version.outputs.new_tag }}

      - name: Create Release
        if: ${{ env.PUBLISH_RELEASE == 'enable' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: ${{ steps.bump_version.outputs.new_tag }}
          body: |
            Auto Patch Release By GitHub Action
          draft: false
          prerelease: false
    outputs:
      latest_tag: ${{ steps.get_tag.outputs.latest_tag }}
      new_tag: ${{ steps.bump_version.outputs.new_tag }}