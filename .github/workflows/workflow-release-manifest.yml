name: Reusable Workflow - Release Manifest

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      REGISTRY:
        required: false
        type: string
        default: "ghcr.io"
    secrets:
      DEVOPS_PKG_TOKEN:
        required: true

env:
  REGISTRY: ${{ inputs.REGISTRY }}
  IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
  IMAGE_TAG: ${{ inputs.IMAGE_TAG }}

jobs:
  javelin-manifest:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-24.04
    steps:
      - name: Download Digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: workflow
          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          tags: |
            type=semver, pattern={{version}}
            type=semver, pattern={{major}}.{{minor}}
            type=sha, prefix=commit-
            type=ref, event=branch
            type=ref, event=tag
            type=raw, value=latest
          flavor: |
            latest=${{ github.event_name == 'release' }}

      - name: Log into Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DEVOPS_PKG_TOKEN }}

      - name: Create Manifest and Push
        working-directory: /tmp/digests
        shell: bash
        run: |-
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)          

      - name: Inspect Docker Image
        shell: bash
        run: |-
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    outputs:
      docker_image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.name }}"